// Generated by CoffeeScript 1.11.1
var Game, autolevel, draw, g, keyPressed, mousePressed, setup, touchStarted,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

g = 0;

Game = (function() {
  function Game(x1, y1, a1, s, stack) {
    var h, w;
    this.x = x1 != null ? x1 : 0;
    this.y = y1 != null ? y1 : 0;
    this.a = a1 != null ? a1 : 0;
    this.s = s != null ? s : 1;
    this.stack = stack != null ? stack : [];
    this.players = [];
    this.level = 1;
    w = width;
    h = height;
    this.mode = 0;
    this.players.push(new Player("WASD", 30, 30, 60, 60));
    this.players.push(new Player("&%('", 90, 30, 60, 60));
    this.display = new Button(this, 0, 0, 15, 10, "", "");
  }

  Game.prototype.push = function() {
    this.stack.push([this.x, this.y, this.a, this.s]);
    return push();
  };

  Game.prototype.pop = function() {
    var ref;
    ref = this.stack.pop(), this.x = ref[0], this.y = ref[1], this.a = ref[2], this.s = ref[3];
    return pop();
  };

  Game.prototype.rotate = function(d) {
    rotate(radians(d));
    return this.a += d;
  };

  Game.prototype.scale = function(ds) {
    scale(ds);
    return this.s *= ds;
  };

  Game.prototype.translate = function(dx, dy) {
    var v;
    v = radians(this.a);
    this.x += this.s * dx * cos(v) - this.s * dy * sin(v);
    this.y += this.s * dy * cos(v) + this.s * dx * sin(v);
    return translate(dx, dy);
  };

  Game.prototype.dump = function(txt) {
    return console.log([txt, this.x, this.y]);
  };

  Game.prototype.process = function() {
    var k, len, player, ref, results;
    this.mode = 1 - this.mode;
    if (this.mode === 0) {
      autolevel();
      return this.createProblem();
    } else {
      ref = this.players;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        player = ref[k];
        results.push(player.history.unshift(player.score()));
      }
      return results;
    }
  };

  Game.prototype.result = function() {
    var k, len, player, ref;
    fill(127);
    rect(0, 0, width, height);
    if (this.players[0].stopp === 0) {
      this.players[0].color = color(127);
    } else if (this.players[0].score() < this.players[1].score() || this.players[1].stopp === 0) {
      this.players[0].color = color(0, 255, 0);
    } else {
      this.players[0].color = color(255, 0, 0);
    }
    if (this.players[1].stopp === 0) {
      this.players[1].color = color(127);
    } else if (this.players[1].score() < this.players[0].score() || this.players[0].stopp === 0) {
      this.players[1].color = color(0, 255, 0);
    } else {
      this.players[1].color = color(255, 0, 0);
    }
    ref = this.players;
    for (k = 0, len = ref.length; k < len; k++) {
      player = ref[k];
      player.result();
    }
    return this.solve_result();
  };

  Game.prototype.solve_result = function() {
    var H, i, k, len, n, number, results, solution, x, x0, y;
    fill(0);
    H = 40;
    textSize(H);
    solution = solve(this.players[0].history[1], this.players[0].target);
    solution.unshift("");
    results = [];
    for (i = k = 0, len = solution.length; k < len; i = ++k) {
      number = solution[i];
      x0 = 0;
      n = (height - H) * 0.9 / H;
      x = int(i / n);
      y = int(i % n);
      results.push(text(number, x0 + x * 100, -(height - H) * 0.9 * 0.5 + y * H));
    }
    return results;
  };

  Game.prototype.createProblem = function() {
    var a, b, d, i, item, j, k, l, len, len1, lst, lst2, m, ms, n, player, ref, ref1, results, save, tree;
    n = int(Math.pow(2, 3 + this.level / 3));
    a = int(random(1, n / 2));
    lst = [a];
    tree = [a];
    lst2 = [];
    save = function(item) {
      if (Math.floor(item) === item && item <= n) {
        if (indexOf.call(tree, item) < 0) {
          lst2.push(item);
          return tree.push(item);
        }
      }
    };
    for (j = k = 1, ref = this.level; 1 <= ref ? k <= ref : k >= ref; j = 1 <= ref ? ++k : --k) {
      lst2 = [];
      for (l = 0, len = lst.length; l < len; l++) {
        item = lst[l];
        save(item + 2);
        save(item * 2);
        save(item / 2);
      }
      lst = lst2;
    }
    i = int(random(0, lst.length));
    b = lst[i];
    d = new Date();
    ms = int(d.getTime());
    ref1 = this.players;
    results = [];
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      player = ref1[m];
      player.history = [a];
      player.target = b;
      player.count = 0;
      player.start = ms;
      player.stopp = 0;
      results.push(player.level = this.level);
    }
    return results;
  };

  return Game;

})();

setup = function() {
  createCanvas(windowWidth, windowHeight);
  frameRate(15);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  g = new Game();
  return g.createProblem();
};

draw = function() {
  var i, k, len, player, ref;
  g.push();
  g.translate(width / 2, height / 2);
  ref = g.players;
  for (i = k = 0, len = ref.length; k < len; i = ++k) {
    player = ref[i];
    g.push();
    if (i === 0) {
      g.translate(-width / 4, 0);
      g.rotate(90);
    }
    if (i === 1) {
      g.translate(width / 4, 0);
      g.rotate(-90);
    }
    player.draw();
    g.pop();
    if (g.mode === 1) {
      g.result();
    }
  }
  g.display.draw();
  return g.pop();
};

touchStarted = function() {
  var k, len, player, ref;
  ref = g.players;
  for (k = 0, len = ref.length; k < len; k++) {
    player = ref[k];
    player.touchStarted();
  }
  return g.display.touchStarted();
};

mousePressed = function() {
  var k, len, player, ref;
  ref = g.players;
  for (k = 0, len = ref.length; k < len; k++) {
    player = ref[k];
    player.mousePressed();
  }
  g.display.mousePressed();
  return draw();
};

keyPressed = function() {
  var k, len, player, ref;
  ref = g.players;
  for (k = 0, len = ref.length; k < len; k++) {
    player = ref[k];
    player.keyPressed(key);
  }
  if (key === ' ') {
    autolevel();
    return g.createProblem();
  }
};

autolevel = function() {
  var finished, k, len, perfect, player, ref;
  finished = 0;
  perfect = 0;
  ref = g.players;
  for (k = 0, len = ref.length; k < len; k++) {
    player = ref[k];
    if (player.finished()) {
      finished++;
    }
    if (player.perfect(g.level)) {
      perfect++;
    }
  }
  if (perfect > 0) {
    g.level++;
  } else {
    g.level--;
  }
  if (g.level === 0) {
    g.level = 1;
  }
  return console.log("autolevel " + g.level);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\Shortcut\www\sketch.coffee