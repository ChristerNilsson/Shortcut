"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button;

Button = function () {
  function Button(parent, x1, y1, w, h, key1, txt) {
    _classCallCheck(this, Button);

    // sixties
    this.parent = parent;
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.key = key1;
    this.txt = txt;
    this.w0 = 99;
    this.h0 = 99;
  }

  _createClass(Button, [{
    key: "draw",
    value: function draw() {
      g.push();
      g.translate(width * this.x / 60, height * this.y / 60);
      this.x0 = g.x;
      this.y0 = g.y;
      this.w0 = g.s * width * this.w / 60;
      this.h0 = g.s * height * this.h / 60;
      fc(1, 1, 1, 0.5);
      rect(0, 0, width * this.w / 60, height * this.h / 60);
      fc(0);
      textSize((this.h0 + this.w0) / 6);
      text(this.txt, 0, 0);
      return g.pop();
    }
  }, {
    key: "mousePressed",
    value: function mousePressed() {
      if (this.x0 - this.w0 / 2 <= mouseX && mouseX <= this.x0 + this.w0 / 2 && this.y0 - this.h0 / 2 <= mouseY && mouseY <= this.y0 + this.h0 / 2) {
        return this.parent.process(this.key);
      }
    }
  }, {
    key: "touchStarted",
    value: function touchStarted(x, y) {
      if (this.x0 - this.w0 / 2 <= x && x <= this.x0 + this.w0 / 2 && this.y0 - this.h0 / 2 <= y && y <= this.y0 + this.h0 / 2) {
        return this.parent.process(this.key);
      }
    }
  }, {
    key: "keyPressed",
    value: function keyPressed(key) {
      if (this.key === key) {
        return this.parent.process(this.key);
      }
    }
  }]);

  return Button;
}();
//# sourceMappingURL=Button.js.map
