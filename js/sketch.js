"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Game,
    autolevel,
    g,
    ids,
    keyPressed,
    mousePressed,
    mouseReleased,
    released,
    setup,
    touchStarted,
    xdraw,
    indexOf = [].indexOf;

g = 0;

ids = {};

released = true;

Game = function () {
  function Game() {
    var x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var a1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    var stack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];

    _classCallCheck(this, Game);

    var h, w;
    this.x = x1;
    this.y = y1;
    this.a = a1;
    this.s = s;
    this.stack = stack;
    this.players = [];
    this.level = 1;
    w = width;
    h = height;
    this.mode = 0;
    this.players.push(new Player("WASD", 30, 30, 60, 60));
    this.players.push(new Player("&%('", 90, 30, 60, 60));
    this.display = new Button(this, 0, -22, 8, 12, "", "");
  }

  _createClass(Game, [{
    key: "push",
    value: function (_push) {
      function push() {
        return _push.apply(this, arguments);
      }

      push.toString = function () {
        return _push.toString();
      };

      return push;
    }(function () {
      this.stack.push([this.x, this.y, this.a, this.s]);
      return push();
    })
  }, {
    key: "pop",
    value: function (_pop) {
      function pop() {
        return _pop.apply(this, arguments);
      }

      pop.toString = function () {
        return _pop.toString();
      };

      return pop;
    }(function () {
      var _stack$pop = this.stack.pop();

      var _stack$pop2 = _slicedToArray(_stack$pop, 4);

      this.x = _stack$pop2[0];
      this.y = _stack$pop2[1];
      this.a = _stack$pop2[2];
      this.s = _stack$pop2[3];

      return pop();
    })
  }, {
    key: "rotate",
    value: function (_rotate) {
      function rotate(_x) {
        return _rotate.apply(this, arguments);
      }

      rotate.toString = function () {
        return _rotate.toString();
      };

      return rotate;
    }(function (d) {
      rotate(radians(d));
      return this.a += d;
    })
  }, {
    key: "scale",
    value: function (_scale) {
      function scale(_x2) {
        return _scale.apply(this, arguments);
      }

      scale.toString = function () {
        return _scale.toString();
      };

      return scale;
    }(function (ds) {
      scale(ds);
      return this.s *= ds;
    })
  }, {
    key: "translate",
    value: function (_translate) {
      function translate(_x3, _x4) {
        return _translate.apply(this, arguments);
      }

      translate.toString = function () {
        return _translate.toString();
      };

      return translate;
    }(function (dx, dy) {
      var v;
      v = radians(this.a);
      this.x += this.s * dx * cos(v) - this.s * dy * sin(v);
      this.y += this.s * dy * cos(v) + this.s * dx * sin(v);
      return translate(dx, dy);
    })
  }, {
    key: "dump",
    value: function dump(txt) {
      return print(txt, this.x, this.y);
    }
  }, {
    key: "process",
    value: function process() {
      this.mode = 1 - this.mode;
      if (this.mode === 0) {
        autolevel();
        return this.createProblem();
      }
    }
  }, {
    key: "result",
    value: function result() {
      var k, len, player, ref;
      fill(127);
      rect(0, 0, width, height);
      if (this.players[0].stopp === 0) {
        this.players[0].color = color(127);
      } else if (this.players[0].score() < this.players[1].score() || this.players[1].stopp === 0) {
        this.players[0].color = color(0, 255, 0);
      } else {
        this.players[0].color = color(255, 0, 0);
      }
      if (this.players[1].stopp === 0) {
        this.players[1].color = color(127);
      } else if (this.players[1].score() < this.players[0].score() || this.players[0].stopp === 0) {
        this.players[1].color = color(0, 255, 0);
      } else {
        this.players[1].color = color(255, 0, 0);
      }
      ref = this.players;
      for (k = 0, len = ref.length; k < len; k++) {
        player = ref[k];
        player.result();
      }
      return this.solve_result();
    }
  }, {
    key: "solve_result",
    value: function solve_result() {
      var H, i, k, len, n, number, results, solution, x, y;
      fill(0);
      n = 20;
      H = height / n;
      textSize(H);
      solution = solve(this.players[0].history[0], this.players[0].target);
      results = [];
      for (i = k = 0, len = solution.length; k < len; i = ++k) {
        number = solution[i];
        x = int(i / n);
        y = int(i % n);
        results.push(text(number, x * 100, -8.5 * H + y * H));
      }
      return results;
    }
  }, {
    key: "createProblem",
    value: function createProblem() {
      var a, b, d, i, item, j, k, l, len, len1, len2, lst, lst2, m, ms, n, player, ref, ref1, results, save, tree;
      n = int(Math.pow(2, 4 + this.level / 3)); // nodes
      a = int(random(1, n / 2));
      lst = [a];
      tree = [a];
      lst2 = [];
      save = function save(item) {
        if (Math.floor(item) === item && item <= n) {
          if (indexOf.call(tree, item) < 0) {
            lst2.push(item);
            return tree.push(item);
          }
        }
      };
      ref = range(this.level);
      for (k = 0, len = ref.length; k < len; k++) {
        j = ref[k];
        lst2 = [];
        for (l = 0, len1 = lst.length; l < len1; l++) {
          item = lst[l];
          save(item + 2);
          save(item * 2);
          save(item / 2);
        }
        lst = lst2;
      }
      i = int(random(lst.length));
      b = lst[i];
      d = new Date();
      ms = int(d.getTime());
      ref1 = this.players;
      results = [];
      for (m = 0, len2 = ref1.length; m < len2; m++) {
        player = ref1[m];
        player.history = [a];
        player.target = b;
        player.count = 0;
        player.start = ms;
        player.stopp = 0;
        results.push(player.level = this.level);
      }
      return results;
    }
  }]);

  return Game;
}();

setup = function setup() {
  createCanvas(windowWidth, windowHeight);
  frameRate(15);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  g = new Game();
  g.createProblem();
  return xdraw();
};

xdraw = function xdraw() {
  var i, k, len, player, ref;
  g.push();
  g.translate(width / 2, height / 2);
  ref = g.players;
  for (i = k = 0, len = ref.length; k < len; i = ++k) {
    player = ref[i];
    g.push();
    g.translate((2 * i - 1) * width / 4, 0);
    player.draw();
    g.pop();
  }
  if (g.mode === 1) {
    g.result();
  }
  g.display.draw();
  g.pop();
  return false; // to prevent double clock on Android
};

// touchStarted = -> 
// 	for touch in touches
// 		if touch.id not of ids 
// 			ids[touch.id] = touch
// 			for player in g.players
// 				player.touchStarted(touch.x,touch.y)
// 	ids = {} if touch.length == 0
// 	g.display.touchStarted(touch.x,touch.y)
// 	xdraw()
mouseReleased = function mouseReleased() {
  // to make Android work 
  released = true;
  return false;
};

touchStarted = function touchStarted() {
  var k, len, player, ref;
  ref = g.players;
  for (k = 0, len = ref.length; k < len; k++) {
    player = ref[k];
    player.mousePressed();
  }
  g.display.mousePressed();
  return xdraw();
};

mousePressed = function mousePressed() {
  var k, len, player, ref;
  if (!released) {
    // to make Android work 
    return;
  }
  released = false;
  ref = g.players;
  for (k = 0, len = ref.length; k < len; k++) {
    player = ref[k];
    player.mousePressed();
  }
  g.display.mousePressed();
  return xdraw();
};

keyPressed = function keyPressed() {
  var k, len, player, ref;
  ref = g.players;
  for (k = 0, len = ref.length; k < len; k++) {
    player = ref[k];
    player.keyPressed(key);
  }
  if (key === ' ') {
    autolevel();
    g.createProblem();
  }
  return xdraw();
};

autolevel = function autolevel() {
  var finished, k, len, perfect, player, ref;
  finished = 0;
  perfect = 0;
  ref = g.players;
  for (k = 0, len = ref.length; k < len; k++) {
    player = ref[k];
    if (player.finished()) {
      finished++;
    }
    if (player.perfect(g.level)) {
      perfect++;
    }
  }
  if (perfect > 0) {
    g.level++;
  } else {
    g.level--;
  }
  if (g.level === 0) {
    return g.level = 1;
  }
};
//# sourceMappingURL=sketch.js.map
